persistence:
  enabled: true
  # Setting it to "keep" to avoid removing PVCs during a helm delete 
  # operation. Leaving it empty will delete PVCs after the chart deleted
  resourcePolicy: keep
# Ther external URL for Harbor core service. It is used to
# 1) populate the docker/helm commands showed on portal
# 2) populate the token service URL returned to docker/notary client
# 
# Format: protocol://domain[:port]
# Usually, if ingress is enabled, the domain should be the value of
# ingress.hosts.core .
# If Harbor is deployed behind the proxy, set it as the URL of proxy
externalURL: https://core.harbor.domain
harborAdminPassword: Harbor12345
# The secret key used for encryption. Must be a string of 16 chars.
secretKey: not-a-secure-key
imagePullPolicy: IfNotPresent

auth:
  mode: db_auth
  selfRegistration: "off"
  ldap:
    url: ldaps://ldap.domain
    searchDn: uid=admin,ou=people,dc=mydomain,dc=com
    searchPassword: search_password
    baseDn: ou=people,dc=mydomain,dc=com
    filter: objectClass=person
    userUid: sAMAccountName
    searchScope: 2
    timeout: 5
    verifyCert: true

email:
  enabled: false
  host: smtp.mydomain.com
  port: "25"
  username: sample_admin@mydomain.com
  password: unsecure_password
  ssl: "false"
  from: "admin <sample_admin@mydomain.com>"
  identity: ""
  insecure: false

ingress:
  enabled: true
  hosts:
    core: core.harbor.domain
    notary: notary.harbor.domain
  annotations:
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
  labels:
    ingress: tls
  tls:
    enabled: true
    # Fill in the empty string if you want to use your own TLS secret
    secretName: &tls_secretName ""
    # notary secret by default uses the value of secretName
    # replace the variable reference if you want to use your own TLS secret for notary
    notarySecretName: *tls_secretName

# Setting ingress.enabled to false will enable the service, and
# the nginx will be deployed as the proxy
service:
  name: harbor
  # ClusterIP or NodePort
  type: ClusterIP
  ports:
    # The port Harbor listens on when serving with HTTP
    http: 
      port: 80
      # set it when the type of service is "NodePort"
      nodePort: 30002
    # The port Harbor listens on when serving with HTTPS
    https: 
      port: 443
      # set it when the type of service is "NodePort"
      nodePort: 30003
    # The port Notary service listens on. Only needed when
    # notary.enabled is set to true
    notary: 
      port: 4443
      # set it when the type of service is "NodePort"
      nodePort: 30004

portal:
  image:
    repository: goharbor/harbor-portal
    tag: dev
  replicas: 1
# resources:
#  requests:
#    memory: 256Mi
#    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}

nginx:
  image:
    repository: goharbor/nginx-photon
    tag: dev
  replicas: 1
  tls:
    enabled: false
    # Fill the secretName if you want to use the certificate of 
    # yourself when Harbor serves with HTTPS. A certificate will 
    # be generated automatically by the chart if leave it empty
    secretName: ""
    # The commmon name used to generate the certificate, fill it 
    # if the secretName is null
    commonName: ""
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}

adminserver:
  image:
    repository: goharbor/harbor-adminserver
    tag: dev
  replicas: 1
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}

jobservice:
  image:
    repository: goharbor/harbor-jobservice
    tag: dev
  replicas: 1
  maxWorkers: 50
  volumes:
    data:
      # existingClaim: ""
      # storageClass: "-"
      subPath: "jobservice"
      accessMode: ReadWriteOnce
      size: 1Gi
# resources:
#   requests:
#     memory: 256Mi
#     cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}

core:
  image:
    repository: goharbor/harbor-core
    tag: dev
  replicas: 1
# resources:
#  requests:
#    memory: 256Mi
#    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}

database:
  # if external database is used, set "type" to "external"
  # and fill the connection informations in "external" section
  type: internal
  internal:
    image:
      repository: goharbor/harbor-db
      tag: dev
    # the superuser password of database
    password: "changeit"
    volumes:
      data:
        # existingClaim: ""
        # storageClass: "-"
        subPath: "database"
        accessMode: ReadWriteOnce
        size: 1Gi
    # resources:
    #  requests:
    #    memory: 256Mi
    #    cpu: 100m
    nodeSelector: {}
    tolerations: []
    affinity: {}
  external:
    host: "192.168.0.1"
    port: "5432"
    username: "user"
    password: "password"
    coreDatabase: "registry"
    clairDatabase: "clair"
    notaryServerDatabase: "notary_server"
    notarySignerDatabase: "notary_signer"
    sslmode: "disable"

registry:
  registry:
    image:
      repository: goharbor/registry-photon
      tag: dev
    logLevel: info
  controller:
    image:
      repository: goharbor/harbor-registryctl
      tag: dev
  replicas: 1
  ## Persist data to a persistent volume
  volumes:
    data:
      # existingClaim: ""
      # storageClass: "-"
      subPath: "registry"
      accessMode: ReadWriteOnce
      size: 5Gi
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}

chartmuseum:
  enabled: true
  image:
    repository: goharbor/chartmuseum-photon
    tag: dev
  replicas: 1
  volumes:
    data:
      # existingClaim: ""
      # storageClass: "-"
      subPath: "chartmuseum"
      accessMode: ReadWriteOnce
      size: 5Gi
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Define which storage backend is used for registry and chartmuseum.
# Refer to https://github.com/docker/distribution/blob/master/docs/configuration.md#storage 
# for the detail.
storage:
  # specify the type of storage: "filesystem", "azure", "gcs", "s3", "swift", 
  # "oss" and fill the information needed in the corresponding section
  type: filesystem
  filesystem:
    rootdirectory: /storage
    #maxthreads: 100
  azure:
    accountname: accountname
    accountkey: base64encodedaccountkey
    container: containername
    #realm: core.windows.net
  gcs:
    bucket: bucketname
    # TODO: support the keyfile of gcs
    #keyfile: /path/to/keyfile
    #rootdirectory: /gcs/object/name/prefix
    #chunksize: 5242880
  s3:
    region: us-west-1
    bucket: bucketname
    #accesskey: awsaccesskey
    #secretkey: awssecretkey
    #regionendpoint: http://myobjects.local
    #encrypt: false
    #keyid: mykeyid
    #secure: true
    #v4auth: true
    #chunksize: 5242880
    #rootdirectory: /s3/object/name/prefix
    #storageclass: STANDARD
  swift:
    authurl: https://storage.myprovider.com/v3/auth
    username: username
    password: password
    container: containername
    #region: fr
    #tenant: tenantname
    #tenantid: tenantid
    #domain: domainname
    #domainid: domainid
    #trustid: trustid
    #insecureskipverify: false
    #chunksize: 5M
    #prefix:
    #secretkey: secretkey
    #accesskey: accesskey
    #authversion: 3
    #endpointtype: public
    #tempurlcontainerkey: false
    #tempurlmethods:
  oss:
    accesskeyid: accesskeyid
    accesskeysecret: accesskeysecret
    region: regionname
    bucket: bucketname
    #endpoint: endpoint
    #internal: false
    #encrypt: false
    #secure: true
    #chunksize: 10M
    #rootdirectory: rootdirectory

clair:
  enabled: true
  image:
    repository: goharbor/clair-photon
    tag: dev
  replicas: 1
  # The interval of clair updaters, the unit is hour, 
  # set to 0 to disable the updaters
  updatersInterval: 12
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}

redis:
  # if external Redis is used, set "type" to "external"
  # and fill the connection informations in "external" section
  type: internal
  internal:
    image:
      repository: goharbor/redis-photon
      tag: dev
    volumes:
      data:
        # existingClaim: ""
        # storageClass: "-"
        subPath: "redis"
        accessMode: ReadWriteOnce
        size: 1Gi
    # resources:
    #  requests:
    #    memory: 256Mi
    #    cpu: 100m
    nodeSelector: {}
    tolerations: []
    affinity: {}
  external:
    host: "192.168.0.2"
    port: "6379"
    # The "coreDatabaseIndex" must be "0" as the library Harbor
    # used doesn't support configuring it
    coreDatabaseIndex: "0"
    jobserviceDatabaseIndex: "1"
    registryDatabaseIndex: "2"
    chartmuseumDatabaseIndex: "3"
    password: ""

notary:
  enabled: true
  server:
    image:
      repository: goharbor/notary-server-photon
      tag: dev
    replicas: 1
  signer:
    image:
      repository: goharbor/notary-signer-photon
      tag: dev
    replicas: 1
  nodeSelector: {}
  tolerations: []
  affinity: {}
